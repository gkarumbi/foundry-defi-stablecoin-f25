//SPDX-License-Identifier: MIT
pragma solidity ^0.8.18;

import {Test} from "forge-std/Test.sol";
import {DeployDSC} from "../../script/DeployDSC.s.sol";
import {DecentralizedStableCoin} from "../../src/DecentralizedStableCoin.sol";
import {DSCEngine} from "../../src/DSCEngine.sol";
import {HelperConfig} from "../../script/HelperConfig.s.sol";
import {ERC20Mock} from "@openzeppelin/contracts/mocks/ERC20Mock.sol";
import {MockV3Aggregator} from "../mocks/MockV3Aggregator.sol"; // Assuming you have a mock price feed

contract DSCEngineTest is Test {
    DeployDSC deployer;
    DecentralizedStableCoin dsc;
    DSCEngine engine;
    HelperConfig config;

    address ethUsdPriceFeed; // Fetch from HelperConfig
    address btcUsdPriceFeed;
    address weth; // Fetch from HelperConfig

    address public USER = makeAddr("user");
    uint256 public constant AMOUNT_COLLATERAL = 10 ether;
    uint256 public constant STARTING_ERC20_BALANCE = 10 ether;

    function setUp() public {
        deployer = new DeployDSC();
        // Our DeployDSC.s.sol script returns (dsc, engine, config) objects
        (dsc, engine, config) = deployer.run();
        (ethUsdPriceFeed, btcUsdPriceFeed, weth,,) = config.activeNetworkConfig(); // Fetch config values
        ERC20Mock(weth).mint(USER, STARTING_ERC20_BALANCE); // Mint WETH to USER
    }

    ///////////////Constructor Tests///////
    address[] public tokenAddresses;
    address[] public priceFeedAddresses;

    function testRevertIfTokenLengthDoesntMatchPriceFeeds() public {
        tokenAddresses.push(weth);
        priceFeedAddresses.push(ethUsdPriceFeed);
        priceFeedAddresses.push(btcUsdPriceFeed);

        vm.expectRevert(DSCEngine.DSCEngine__TokenAddressesAndPriceFeedAddressesMustBeSameLength.selector);
        new DSCEngine(tokenAddresses, priceFeedAddresses, address(dsc));
    }

    ///////////////Price Tests/////////////
    function testGetUsdValue() public view {
        uint256 ethAmount = 15e18;
        uint256 expectedUsd = 30000e18; // 15e18 * 2000 USD/ETH
        uint256 actualUsd = engine.getUsdValue(weth, ethAmount);
        assertEq(expectedUsd, actualUsd);
    }

    function testGetTokenAmountFromUsd() public view {
        uint256 usdAmount = 100 ether;
        uint256 expectedWeth = 0.05 ether; // 100 USD / 2000 USD/ETH
        uint256 actualWeth = engine.getTokenAmountFromUsd(weth, usdAmount);
        assertEq(expectedWeth, actualWeth);
    }

    /////////////////////Deposit Collateral Tests///////////////////////
    function testRevertsIfCollateralZero() public {
        vm.startPrank(USER);
        ERC20Mock(weth).approve(address(engine), AMOUNT_COLLATERAL);

        vm.expectRevert(DSCEngine.DSCEngine__NeedsMoreThanZero.selector);
        engine.depositCollateral(weth, 0);

        vm.stopPrank();
    }

    function testRevertsWithUnapprovedCollateral() public {
        // Create a random mock token
        ERC20Mock randToken = new ERC20Mock("RAND", "RAND", USER, AMOUNT_COLLATERAL);
        vm.startPrank(USER);
        vm.expectRevert(DSCEngine.DSCEngine__NotAllowToken.selector);
        engine.depositCollateral(address(randToken), AMOUNT_COLLATERAL);
        vm.stopPrank();
    }

    modifier depositedCollateral() {
        vm.startPrank(USER);
        ERC20Mock(weth).approve(address(engine), AMOUNT_COLLATERAL);
        engine.depositCollateral(weth, AMOUNT_COLLATERAL);
        vm.stopPrank();
        _;
    }

    function testCanDepositCollateralAndGetAccountInfo() public depositedCollateral {
        (uint256 totalDscMinted, uint256 collateralValueInUsd) = engine.getAccountInformation(USER);

        uint256 expectedTotalDscMinted = 0;
        uint256 expectedDepositedAmount = engine.getTokenAmountFromUsd(weth, collateralValueInUsd);
        assertEq(totalDscMinted, expectedTotalDscMinted);
        assertEq(AMOUNT_COLLATERAL, expectedDepositedAmount);
    }

    /////////////////////Health Factor Tests///////////////////////
    function testRevertsIfHealthFactorIsBroken_BelowMinimum() public depositedCollateral {
        uint256 LIQUIDATION_THRESHOLD = 50; // 50% collateralized, needs to be more than 200% overcollateralized
        uint256 LIQUIDATION_PRECISION = 100;
        uint256 MIN_HEALTH_FACTOR = 1e18;
        vm.startPrank(USER);
        // Mint DSC to simulate debt
        engine.mintDsc(1000e18); // Mint 1000 DSC

        // Simulate a price drop in ETH (e.g., ETH price drops to $1000)
        MockV3Aggregator(ethUsdPriceFeed).updateAnswer(1000e8); // Update price feed to $1000

        // Check that the health factor is now below the minimum
        (uint256 totalDscMinted, uint256 collateralValueInUsd) = engine.getAccountInformation(USER);
        uint256 healthFactor = (collateralValueInUsd * LIQUIDATION_THRESHOLD) / (LIQUIDATION_PRECISION * 1e18) / totalDscMinted;
        assert(healthFactor< MIN_HEALTH_FACTOR);

        // Expect revert when checking health factor
        //vm.expectRevert(abi.encodeWithSelector(DSCEngine.DSCEngine__BreaksHealthFactor.selector, healthFactor));
        //engine.revertIfHealthFactorIsBroken(USER);
        vm.stopPrank();
    }

    function testRevertsIfHealthFactorIsBroken_AboveMinimum() public depositedCollateral {
        uint256 LIQUIDATION_THRESHOLD = 50; // 50% collateralized, needs to be more than 200% overcollateralized
        uint256 LIQUIDATION_PRECISION = 100;
        uint256 MIN_HEALTH_FACTOR = 1e18;
        vm.startPrank(USER);
        // Mint a small amount of DSC to keep health factor above minimum
        engine.mintDsc(500e18); // Mint 500 DSC

        // Check that the health factor is above the minimum
        (uint256 totalDscMinted, uint256 collateralValueInUsd) = engine.getAccountInformation(USER);
        uint256 healthFactor = (collateralValueInUsd * LIQUIDATION_THRESHOLD) / LIQUIDATION_PRECISION * 1e18 / totalDscMinted;
        assertGt(healthFactor, MIN_HEALTH_FACTOR, "Health factor should be above minimum");

        // Ensure no revert occurs
        engine.revertIfHealthFactorIsBroken(USER);
        vm.stopPrank();
    }
}